require('dotenv').config();
const axios = require('axios');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const API_KEY = process.env.OPENAI_API_KEY;
const API_URL = 'https://api.openai.com/v1/completions';

async function fetchChatCompletion(prompt) {
    try {
        const response = await axios.post(API_URL, {
            model: "gpt-4",  // Updated to GPT-4
            prompt: prompt,
            max_tokens: 150,
            temperature: 0.7,
            stop: ["\n", ".", "!"]
        }, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${API_KEY}`
            }
        });

        return response.data.choices[0].text.trim();
    } catch (error) {
        console.error('Error fetching completion:', error.response ? error.response.data : error);
        return null;
    }
}

function suggestLearningResources(topic) {
    const resources = {
        'Java': [
            { name: 'Java Programming Basics', url: 'https://www.example.com/java-basics' },
            { name: 'Advanced Java Programming', url: 'https://www.example.com/advanced-java' }
        ],
        'Python': [
            { name: 'Python for Beginners', url: 'https://www.example.com/python-beginners' },
            { name: 'Data Science with Python', url: 'https://www.example.com/data-science-python' }
        ],
        // You can add more resources and topics here
    };

    return resources[topic] || [{ name: 'No resources available', url: '#' }];
}

async function displayContentAndResources(topic) {
    console.log(`\nGenerating content for the topic: ${topic}...\n`);
    const content = await fetchChatCompletion(`Please explain the basic and advanced concepts of ${topic}.`);

    console.log(`Generated Content:\n${content}\n`);
    console.log('Suggested Learning Resources:');
    const resources = suggestLearningResources(topic);
    resources.forEach(resource => {
        console.log(`- ${resource.name}: ${resource.url}`);
    });

    console.log('\nDisclaimer: The content is generated by an AI model and may not be accurate. Use it for reference purposes only.');
}

rl.question('Enter a technical topic (e.g., Java, Python): ', (topic) => {
    displayContentAndResources(topic.trim());
    rl.close();
});